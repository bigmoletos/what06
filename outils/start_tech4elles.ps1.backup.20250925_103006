# üöÄ Script de D√©marrage Tech4Elles
# Utilise la bonne version de Node.js et d√©marre l'application

Write-Host "üöÄ D√©marrage de Tech4Elles..." -ForegroundColor Green
Write-Host ""

# V√©rifier que nous sommes dans le bon dossier
if (-not (Test-Path "../Tech4Elles/docker-compose.dev.yml")) {
    Write-Host "‚ùå Fichier docker-compose.dev.yml non trouv√©!" -ForegroundColor Red
    Write-Host "üí° Ex√©cutez ce script depuis le dossier outils" -ForegroundColor Yellow
    exit 1
}

# V√©rifier et installer Node.js si n√©cessaire
Write-Host "üîç V√©rification de Node.js..." -ForegroundColor Cyan
$nodeVersion = $null

try {
    $nodeVersion = node --version 2>$null
    if ($nodeVersion) {
        Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Node.js non trouv√©" -ForegroundColor Red
}

if (-not $nodeVersion) {
    Write-Host "üì• Installation de Node.js..." -ForegroundColor Yellow

    # Essayer d'installer Node.js via winget
    try {
        Write-Host "üí° Tentative d'installation via winget..." -ForegroundColor Cyan
        winget install OpenJS.NodeJS
        Write-Host "‚úÖ Node.js install√© via winget" -ForegroundColor Green

        # Recharger le PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")

        # V√©rifier √† nouveau
        Start-Sleep -Seconds 3
        $nodeVersion = node --version 2>$null
        if ($nodeVersion) {
            Write-Host "‚úÖ Node.js maintenant disponible: $nodeVersion" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå √âchec de l'installation via winget" -ForegroundColor Red
        Write-Host "üí° Veuillez installer Node.js manuellement depuis https://nodejs.org/" -ForegroundColor Yellow
        Write-Host "üí° Ou utilisez: winget install OpenJS.NodeJS" -ForegroundColor Yellow
        exit 1
    }
}

# V√©rifier et installer pnpm si n√©cessaire
Write-Host "üîç V√©rification de pnpm..." -ForegroundColor Cyan
$pnpmVersion = $null

try {
    $pnpmVersion = pnpm --version 2>$null
    if ($pnpmVersion) {
        Write-Host "‚úÖ pnpm d√©tect√©: $pnpmVersion" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå pnpm non trouv√©" -ForegroundColor Red
}

if (-not $pnpmVersion) {
    Write-Host "üì• Installation de pnpm..." -ForegroundColor Yellow

    try {
        # Installer pnpm via npm
        Write-Host "üí° Installation via npm..." -ForegroundColor Cyan
        npm install -g pnpm
        Write-Host "‚úÖ pnpm install√© via npm" -ForegroundColor Green

        # Recharger le PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")

        # V√©rifier √† nouveau
        Start-Sleep -Seconds 2
        $pnpmVersion = pnpm --version 2>$null
        if ($pnpmVersion) {
            Write-Host "‚úÖ pnpm maintenant disponible: $pnpmVersion" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå √âchec de l'installation de pnpm" -ForegroundColor Red
        Write-Host "üí° Tentative d'installation via winget..." -ForegroundColor Yellow

        try {
            winget install pnpm
            Write-Host "‚úÖ pnpm install√© via winget" -ForegroundColor Green

            # Recharger le PATH
            $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")

            # V√©rifier √† nouveau
            Start-Sleep -Seconds 2
            $pnpmVersion = pnpm --version 2>$null
            if ($pnpmVersion) {
                Write-Host "‚úÖ pnpm maintenant disponible: $pnpmVersion" -ForegroundColor Green
            }
        } catch {
            Write-Host "‚ùå √âchec de l'installation de pnpm" -ForegroundColor Red
            Write-Host "üí° Veuillez installer pnpm manuellement:" -ForegroundColor Yellow
            Write-Host "   npm install -g pnpm" -ForegroundColor White
            Write-Host "   ou winget install pnpm" -ForegroundColor White
            exit 1
        }
    }
}

# V√©rifier et d√©marrer PostgreSQL
Write-Host "üêò V√©rification de PostgreSQL..." -ForegroundColor Cyan

# V√©rifier les services PostgreSQL locaux
$postgresServices = Get-Service | Where-Object {$_.Name -like "*postgres*"}
$postgresRunning = $false

if ($postgresServices) {
    foreach ($service in $postgresServices) {
        if ($service.Status -eq "Running") {
            Write-Host "‚úÖ Service PostgreSQL $($service.Name) d√©j√† en cours d'ex√©cution" -ForegroundColor Green
            $postgresRunning = $true
            break
        }
    }

    if (-not $postgresRunning) {
        Write-Host "‚ö†Ô∏è Services PostgreSQL arr√™t√©s, tentative de d√©marrage..." -ForegroundColor Yellow
        try {
            # Essayer de d√©marrer le service le plus r√©cent
            $latestService = $postgresServices | Sort-Object Name -Descending | Select-Object -First 1
            Start-Service $latestService.Name -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Service PostgreSQL $($latestService.Name) d√©marr√©" -ForegroundColor Green
            $postgresRunning = $true
        } catch {
            Write-Host "‚ùå √âchec du d√©marrage des services PostgreSQL locaux" -ForegroundColor Red
        }
    }
}

# Si PostgreSQL local non disponible, utiliser Docker
if (-not $postgresRunning) {
    Write-Host "üê≥ Utilisation de PostgreSQL via Docker..." -ForegroundColor Cyan
    try {
        docker compose -f ../Tech4Elles/docker-compose.dev.yml up -d
        Write-Host "‚úÖ PostgreSQL Docker d√©marr√©" -ForegroundColor Green
        $postgresRunning = $true
    } catch {
        Write-Host "‚ùå √âchec du d√©marrage PostgreSQL via Docker" -ForegroundColor Red
        Write-Host "üí° V√©rifiez que Docker est install√© et en cours d'ex√©cution" -ForegroundColor Yellow
        exit 1
    }
}

# Attendre que PostgreSQL soit pr√™t
Write-Host "‚è≥ Attente du d√©marrage de PostgreSQL..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Naviguer vers le dossier API
Write-Host "üìÅ Navigation vers l'API..." -ForegroundColor Cyan
Set-Location ../Tech4Elles/apps/api

# V√©rifier que les migrations sont √† jour
Write-Host "üîç V√©rification des migrations..." -ForegroundColor Cyan
try {
    $migrationStatus = node ace migration:status 2>$null
    if ($migrationStatus -like "*pending*") {
        Write-Host "‚ö†Ô∏è Migrations en attente d√©tect√©es" -ForegroundColor Yellow
        Write-Host "üîÑ Ex√©cution des migrations..." -ForegroundColor Cyan
        node ace migration:run
        Write-Host "‚úÖ Migrations ex√©cut√©es" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Migrations √† jour" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de v√©rifier le statut des migrations" -ForegroundColor Yellow
    Write-Host "üí° Tentative d'ex√©cution des migrations..." -ForegroundColor Cyan
    try {
        node ace migration:run
        Write-Host "‚úÖ Migrations ex√©cut√©es" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå √âchec des migrations" -ForegroundColor Red
        Write-Host "üí° V√©rifiez la connexion √† la base de donn√©es" -ForegroundColor Yellow
    }
}

# V√©rifier si les tables contiennent des donn√©es (seeders n√©cessaires)
Write-Host "üå± V√©rification des donn√©es utilisateur..." -ForegroundColor Cyan
$needsSeeding = $false

# TEMPORAIRE : D√©sactiver la v√©rification automatique qui supprime l'admin
Write-Host "‚ö†Ô∏è V√©rification admin d√©sactiv√©e temporairement pour √©viter la suppression automatique" -ForegroundColor Yellow
Write-Host "üí° L'admin existe d√©j√† et ne doit pas √™tre recr√©√©" -ForegroundColor Green

# Ex√©cuter les seeders si n√©cessaire
if ($needsSeeding) {
    Write-Host "üå± Ex√©cution des seeders..." -ForegroundColor Cyan
    try {
        # Essayer d'ex√©cuter tous les seeders
        node ace db:seed
        Write-Host "‚úÖ Seeders ex√©cut√©s avec succ√®s" -ForegroundColor Green

        # V√©rifier √† nouveau la connexion admin
        Start-Sleep -Seconds 2
        try {
            $testData = '{"email":"admin@yopmail.com","password":"admin1234"}'
            $response = Invoke-RestMethod -Uri "http://localhost:3333/users/login" -Method POST -ContentType "application/json" -Body $testData -ErrorAction Stop
            Write-Host "‚úÖ Connexion admin v√©rifi√©e apr√®s seeding" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è Connexion admin √©chou√©e apr√®s seeding" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ö†Ô∏è Erreur lors de l'ex√©cution des seeders: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "üí° Tentative d'ex√©cution individuelle des seeders..." -ForegroundColor Cyan

        # Essayer individuellement
        $seeders = @(
            "database/seeders/admin_seeder.ts",
            "database/seeders/mentee_seeder.ts",
            "database/seeders/mentor_seeder.ts"
        )

        foreach ($seeder in $seeders) {
            try {
                node ace db:seed --files="$seeder"
                Write-Host "‚úÖ Seeder $seeder ex√©cut√©" -ForegroundColor Green
            } catch {
                Write-Host "‚ö†Ô∏è √âchec du seeder $seeder" -ForegroundColor Yellow
            }
        }
    }
} else {
    Write-Host "‚úÖ Donn√©es utilisateur d√©j√† pr√©sentes" -ForegroundColor Green
}

# Retourner au dossier racine
Set-Location ..\..

# Installer les d√©pendances si n√©cessaire
if (-not (Test-Path "node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Cyan
    pnpm install
}

# D√©marrer l'application
Write-Host "üöÄ Lancement de Tech4Elles..." -ForegroundColor Green
Write-Host "üìã URLs disponibles:" -ForegroundColor Cyan
Write-Host "  - API Backend: http://localhost:3333" -ForegroundColor White
Write-Host "  - App Utilisateur: http://localhost:3000" -ForegroundColor White
Write-Host "  - App Admin: http://localhost:3001" -ForegroundColor White
Write-Host "  - Base de donn√©es: localhost:5435" -ForegroundColor White
Write-Host ""

# D√©marrer avec pnpm
try {
    pnpm dev
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage avec pnpm" -ForegroundColor Red
    Write-Host "üí° Tentative avec npm..." -ForegroundColor Yellow

    try {
        npm run dev
    } catch {
        Write-Host "‚ùå Erreur lors du d√©marrage avec npm" -ForegroundColor Red
        Write-Host "üí° V√©rifiez que le script 'dev' existe dans package.json" -ForegroundColor Yellow
        exit 1
    }
}
